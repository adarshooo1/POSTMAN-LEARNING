#.Query parameters
Remember that the minimum ingredients you need to make a request are:

-> a request method (GET/POST/PUT/PATCH/DELETE, etc)
-> a request URL.

Some APIs allow you to refine your request further with key-value pairs called query parameters. 

//////////////////////////////////////////////////////////////////////

#.Query parameter syntax
Query parameters are added to the end of the path. They start with a question mark ?, followed by the key value pairs in the format: <key>=<value>. For example, this request might fetch all photos that have landscape orientation:

GET https://some-api.com/photos?orientation=landscape

If there are multiple query parameters, each is separated by an ampersand &. Below, two query parameters to specify the orientation and size of photos to be returned:

GET https://some-api.com/photos?orientation=landscape&size=500x400

///////////////////////////////////////////////////////////////////////

Search Google - with query parameters!
Try pasting this URL into your browser or as a GET request in Postman to make a Google search for "postman". (If you use Postman, click the "Preview" tab in the response to view the rendered HTML!)

https://www.google.com/search?q=postman

This request adds a search term as a query parameter q=postman ("q" refers to "query" here) to the GET /search path on Google's server.

Because this parameter is in our request, the server returns an HTML document that is a search results page with hits for "postman". The search bar is pre-populated with our query "postman".

Google search result screenshot for the search term "Postman". Postman is shown in the search bar, and the search results are for "Postman"

You can change your search directly from the URL by changing the value for the query parameter q=<something else!>

//////////////////////////////////////////////////////////////////////

#.When to use query parameters?
The answer is always: read the API documentation!

Sometimes query parameters are optional and allow you to add filters or extra data to your responses. Sometimes they are required in order for the server to process your request. APIs are implemented differently to fulfill different needs. 

The Postman Library API v2 allows you to add optional query parameters on requests to GET /books to filter the books that come back in response. Let's try it out next!

////////////////////////////////////////////////////////////////////////
TASK : Search books by genre

Let's try to filter our books results to only show us fiction books. Check out the Postman Library API v2 documentation! 

The API allows us to add query parameters to a GET /books request to filter the results, as shown under "Params"

//////////////////////////////////////////////////////////////////////////
How to Get all fiction books:

Let's filter the library catalog to get all the fiction books. We can recycle the first request since we are hitting the same GET /books endpoint.

1.In Postman inside the  Postman Library API v2 Collection you made, hover over the "get books" request, click the three dots icon that appears, then select Duplicate to create a copy of the request.

2.Rename this second request from the default "get books Copy" to "get fiction books". You can hover on the collection name in the right pane and click the edit icon that appears. 

3.Using the Params tab, add a query parameter with key genre and value fiction to the "get fiction books" request. Notice how Postman syncs the request URL in real time, adding the question mark ? automatically to mark the start of query parameters!

4.Save your request

5.Send your request

You should get a 200 OK response with an array of books objects - but only books with the fiction genre! 

/////////////////////////////////////////////////////////////////////////

TASK: Multiple query Parameters:

As a librarian you'll need to help visitors find books that are available (not checked out).

Let's add a second query parameter to GET /books to only return books where the checkedOut property is false. Here is the documentation if you need a reminder.

Add another query parameter

1.In the same "get fiction books" request, in the Params tab add a second query parameter with key checkedOut and value false.

2.Save your request 

3.Send your request

You should get a 200 OK response with an array of only fiction books that are not checked out, or an empty array [] if there are no fiction books available .

///////////////////////////////////////////////////////////////////////////

#.Path Parameters

Another way of passing request data to an API is via path parameters. A path parameter (or "path variable") is a dynamic section of a path, and is often used for IDs and entity names such as usernames. 

#.Path parameter syntax

Path parameters come immediately after a slash in the path. For example, the GitHub API allows you to search for GitHub users by providing a username in the path in place of {username} below: 

-> GET https://api.github.com/users/{username}

Making this API call with a value for {username} will fetch data about that user:

-> GET https://api.github.com/users/postmanlabs

You can have multiple path parameters in a single request, such as this endpoint for getting a user's GitHub code repository:

-> GET https://api.github.com/repos/{owner}/{repoName}

For example, to get information about the newman code repository from postmanlabs:

-> GET https://api.github.com/repos/postmanlabs/newman

///////////////////////////////////////////////////////////////////////////

#.Path vs. query parameters
At first it is easy to confuse these two parameter types. Let's compare them side by side. 


Path parameters                	                                            |               Query parameters
 -> ex: /books/abc123	                                                        | -> ex: /books?search=borges&checkedOut=false
 -> Located directly after a slash in the path. Can be anywhere in the path     | -> Located only at the end of a path, right after a question mark ?
 -> Accepts dynamic values	                                                  | -> Accepts defined query keys with potentially dynamic values.
 -> Often used for IDs or entity names	                                      | ->       * Often used for options and filters.

* These are just conventions! Some APIs might ask you to pass an ID or username in a query parameter like this: /users?username=getpostman

/////////////////////////////////////////////////////////////////////////////

#.When to use path parameters?

Always read the API documentation! If a path parameter is required, the documentation will mention this.

Note that some API documentation uses colon syntax to represent a wildcard in the path, like /users/:username, while some use curly braces like /users/{username}. They both mean the same thing: that part of the path is dynamic!

////////////////////////////////////////////////////////////////////////////////

#.Task: Get a book by id

Someone keeps coming into the library every day asking whether "Ficciones" by Jorge Luis Borges is available. 

When you fetched all the books in the library, you may have noticed that each book as a unique id value. This id can always be used to identify the book, even if its other properties are changed.

Since this person keeps asking about "Ficciones", you've jotted down that the unique id for this book is 29cd820f-82f9-4b45-a7f4-0924111b5b89

(Don't believe us? You can always search for "Ficciones" with the search query parameter: GET /books?search=ficciones)

///////////////////////////////////////////////////////////////////////////////////

#.Get a book by id

According to the API documentation, we can get a specific book by hitting the path GET /books/:id, where we replace :id with the book's id.

1.Hover on your Postman Library API v2 Collection, click the three dots icon and select Add request. Name your new request "get book by id"

2.Make sure the request method is set to GET, and paste in this endpoint as the request URL: https://library-api.postmanlabs.com/books/:id

Postman automatically adds a "Path Variables" editor in the Params tab of the request for any path parameters in the request URL prefixed with a colon :

3.In the Params tab of the request, paste the id for "Ficciones" (29cd820f-82f9-4b45-a7f4-0924111b5b89) as the value for the parameter named id. Make sure not to add any whitespace around the id value.

4.Save your request .

5.Send your request.

You should get a 200 OK response with a single JSON object that represents the "Ficciones" book. At the time of this example, the book is not checked out:
 Postman screenshot: Response from library API for getting specific book by id

//////////////////////////////////////////////////////////////////////////////////

#.Debugging requests in the Postman Console

You used Postman's path variable helper in the Params tab of the request to add a path variable nicknamed :id to the request URL in a human-friendly way. Postman replaces :id with the value you specify for id in the Path Variables editor.

You can always view the raw request sent to the API by opening the Postman Console in the lower left of Postman.

All requests you make and their responses are logged in the Postman Console. Scroll to the bottom to expand the most recent request. 

Postman screenshot: Expanded view of the Postman Console, which has logged the past requests and responses. Here we see the raw request for getting a book - the book id has been interpolated as a path parameter

You can see that Postman has inserted the book id as a path parameter in place of the :id placeholder when making the request. Cool!



 

 