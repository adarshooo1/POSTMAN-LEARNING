                  Introduction of Variables and Scripting

#.Variables in Postman

Postman allows you to save values as variables so that you can:  

1.Reuse values to keep your work DRY (Don’t Repeat Yourself)

2.Hide sensitive values like API keys from being shared publicly.

In this section we will add variables to our collection to introduce better practices and allow us to make dynamic requests. 

///////////////////////////////////////////////////////////////////////////

#.Variable scopes

You can set variables that live at various scopes. Postman will resolve to the value at the nearest and narrowest scope.

In order from broadest to narrowest, these scopes are: global, collection, environment, data, and local.

We will work with collection variables today, which are variables that live at the collection level and be can accessed anywhere inside the collection.

///////////////////////////////////////////////////////////////////////////

#.Variable syntax

Once a variable is defined, you can access its value using double curly brace syntax like this:

{{variableName}}

In the next section you will learn how to set a variable.

///////////////////////////////////////////////////////////////////////////

#.Task: Set "baseUrl" variable

One way to set a variable is to highlight the input text you'd like to convert into a variable, and follow the "Set as variable" popup instructions. 

///////////////////////////////////////////////////////////////////////////

#.Make a baseUrl variable

We use the same base URL for all requests to the library API. We can simplify our requests by replacing https://library-api.postmanlabs.com with a variable called {{baseUrl}}

1.Go to the first "get books" request in your collection.

2.With your cursor, select the entire base URL of the API (https://library-api.postmanlabs.com). Do not include the slash / after .com.

Click Set as variable to save the base URL to a variable.

[Postman screenshot: highlighting input text reveals a popup that allows you to set the text as a variable]

3.Click Set as a new variable

[Postman screenshot: Set a new variable]

4.Name your new variable “baseUrl” and select “Collection” as the scope, then click Set variable

[Postman screenshot: Define the new variable with a name baseUrl and scope of Collection]

Now that the variable is set, you can access the value anywhere in your collection by typing {{baseUrl}}

5.Hover over {{baseUrl}}. You will see its current value is set to https://library-api.postmanlabs.com

[Postman screenshot: {{baseUrl}} resolves to the api base url that was set as a variable]

6.Now you can send your request and see that it works just like before! You should get a status 200 OK response with a list of books.

///////////////////////////////////////////////////////////////////////////

#.Where are my variables?
You can find Collection variables on your collection.

Click on your collection, then the Variables tab. Here you can view and edit your variables.

[Postman screenshot: Collection variables tab of the collection]

Note that there are two columns:

-> Initial Value - the value initially set when someone forks or imports your collection. Note that if you share your collection with others they will see this value, so don't put any secrets here!

-> Current Value - Postman always resolves the variable to this value. This is local to your Postman account, and not public. It is good to keep secrets like API Keys ONLY in this column and not include in the Initial Value column.

///////////////////////////////////////////////////////////////////////////

#.Update all your requests to use {{baseUrl}}

1.Set all your requests to use {{baseUrl}} to replace https://library-api.postmanlabs.com (before the slash /).

[Animation of converting the API base URL into a collection variable]

2.Be sure to Save each request after the change!

Next you will learn how to set variables automatically, with code!

///////////////////////////////////////////////////////////////////////////

                          Setting variables programmatically

#.Scripting in Postman

Postman gives you the ability to add automations and dynamic behaviors to your collections with scripting.

Any Node.js code in the Tests tab of a request will be executed after a response comes back from the API.

///////////////////////////////////////////////////////////////////////////

#.The pm object

Postman has a helper object named pm that gives you access data about your postman environment, requests, responses, variables and testing utilities. 

For example, you can access the JSON response body from the API with: 

-> pm.response.json()

You can also programmatically get collection variables like the value of baseUrl with:

-> pm.collectionVariables.get(“baseUrl”)

In addition to getting variables you can also set them with
-> pm.collectionVariables.set("variableName", "variableValue") like this:

-> pm.collectionVariables.set(“myVar”, “foo”)

Get ready!

/////////////////////////////////////////////////////////////////

                  Task: Your first script
If you are new to Node.js and JavaScript - have no fear! Node.js is a runtime environment for executing JavaScript code outside of a web browser. 

/////////////////////////////////////////////////////////////////

#.Logging data 

In JavaScript, you can print data for a value to the console using this syntax:

console.log("Hello world!")
// => Hello world!

//////////////////////////////////////////////////////////////////

#.Comments

In JavaScript you can add comments to your code. Comments are skipped by the interpreter, so you can use them to explain things in your code if you like. 

// Single line comments start with two slashes. I am not code!

/* You can write multi-line comments by 
opening and closing with slash and asterisk. 
I am not code!
*/

////////////////////////////////////////////////////////////////

Add a script to your request

1.In your "add a book" request, change the book data in your Body to a new book you like.

2.Open the Tests tab of the request

[Postman screenshot: Open the Tests tab of the "add a book" response to see the Tests editor]

3.Inside the Tests editor, add this JavaScript code to log the JSON response from the API:

-> console.log(pm.response.json())

[Postman screenshot: Code in the Tests script editor for logging the JSON response from the API to the console: console.log(pm.response.json()))]

4.Save your request

5.Send your request. This will trigger the script in the Tests tab to run after the response comes back from the API

6.Open the Postman Console in the lower left of the window

Postman screenshot: Access the Postman console from the lower left corner of the window

7.Scroll to the bottom of the logs in the console. You will see your most recent request POST https://library-api.poistmanlabs.com/books. 

The response data from the API is logged in the console because of the code in our Tests tab! You can expand the data by clicking on the small arrow to the left

[Postman screenshot: Response data from the API is logged to the Postman console because of the code in the Tests tab of the request]
 
Congratulations!

//////////////////////////////////////////////////////////////////

			Task: Grab the new book id
Saving a value as a variable allows you to use it in other requests. Let's grab the id of a newly added book and save it so we can use it in future requests.

//////////////////////////////////////////////////////////////////

#.Setting and getting collection variables
The pm object allows you to set and get collection variables.

To set a collection variable use the .set() method with two parameters: the variable name and the variable value

-> pm.collectionVariables.set("variableName", value)

To get a collection variable use the .get() method and specify the name of the variable you want to retrieve:

-> pm.collectionVariables.get("variableName")

//////////////////////////////////////////////////////////////////

#.Local variables

We can also store local variables inside our Tests script using JavaScript. 

There are two ways to define a variable in JavaScript: using the const or let keywords. const is for variables that won't change value, whereas let allows you to reassign the value later.

|||||||||||||||||||||||||||||CODE|||||||||||||||||||||||||||||||||

// -- Defining variables with const --
const myVar = "This variable can't be reassigned"
console.log(myVar) // => This variable can't be reassigned

// attempt to reassign the value of myVar
myVar = "foo" 
//=> [ERROR!] Uncaught TypeError: Assignment to constant variable.

// -- Defining variables with let -- 
let myVar2 = "I can change!"
console.log(myVar2) // => I can change!

myVar2 = "See, I changed!"
console.log(myVar2) // => See, I changed!

|||||||||||||||||||||||||||||CODE|||||||||||||||||||||||||||||||||

//////////////////////////////////////////////////////////////////
 
#.Set the new book id as a variable 

1.In the Body tab of the "add a book" request, change the details to yet another new book to add!

2.In the Tests tab of the "add a book" request, replace the console.log() statement with this code:

|||||||||||||||||||||||||||||CODE|||||||||||||||||||||||||||||||||
const id = pm.response.json().id
pm.collectionVariables.set("id", id)
|||||||||||||||||||||||||||||CODE|||||||||||||||||||||||||||||||||

First we assign the id value from our API response to a local const variable named id (we use const because this value doesn't change in our script). The second line sets this value to a collection variable called id.

[Postman screenshot: Add a script in the Tests tab for setting the collection variable named id]

3.Save your request

4.Send your request.

When the 201 response comes back from the API with you newly created book, the Tests script will run and save the book's id as a collection variable automatically.

5.View your collection variables by clicking on your Postman Library API v2 collection, then the Variables tab.

The id variable has been automatically assigned the id of your new book as its Current Value!

[Postman screenshot: A collection variable named id has been automatically added by our Tests tab script].


